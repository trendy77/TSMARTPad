/***********************************************************************************************
* [IttyBitty_menui.h]: MENU-BASED UI SYSTEM W/ INPUT FIELDS AND EXTENSIBLE NAVIGATION/DISPLAY
*
* This file is part of the Itty Bitty Arduino library.
* Copyright © 2016 Thomas J. Biuso III  ALL RIGHTS RESERVED...WHATEVER THAT MEANS.
* RELEASED UNDER THE GPL v3.0 LICENSE; SEE <LICENSE> FILE WITHIN DISTRIBUTION ROOT FOR TERMS.
***********************************************************************************************/

#ifndef _ITTYBITTY_UI_OPTIONS_H
#define _ITTYBITTY_UI_OPTIONS_H


#include "IttyBitty_bits.h"
#include "IttyBitty_LCD_chars.h"


#pragma region MenUI OPTIONS/CONSTANTS

// [UiOptions] DEFAULT OPTIONS

// Behavior/interaction default options

#define MENUI_DEFAULT_SCROLL_WRAP				TRUE
#define MENUI_DEFAULT_SCROLL_HOLD_ROW			MAX_BYTE

#define MENUI_DEFAULT_IDLE_TIMEOUT_TICKS		50


// Navigation/input default options

#define MENUI_DEFAULT_DBL_CLICK_THRESHOLD_MS	800
#define MENUI_DEFAULT_HOLD_THRESHOLD_MS			800
#define MENUI_DEFAULT_HOLD_REPEAT_MS			50

#define MENUI_DEFAULT_SELECT_ON_RETURN				FALSE
#define MENUI_DEFAULT_HOLD_SELECT_TO_SELECT			TRUE
#define MENUI_DEFAULT_HOLD_SELECT_TO_RETURN			TRUE


// Display default options

#define MENUI_DEFAULT_SHOW_CURSOR				TRUE
#define MENUI_DEFAULT_BLINK_CURSOR				TRUE
#define MENUI_DEFAULT_WRAP_LABELS				FALSE

#define MENUI_DEFAULT_HIGHLIGHT_SELECTIONS		FALSE

#define MENUI_DEFAULT_LAYOUT_COL_SPACING		1
#define MENUI_DEFAULT_LIST_ITEM_MARGIN			0
#define MENUI_DEFAULT_SELECTION_GLYPH_OFFSET	0

#define MENUI_DEFAULT_MENU_LAYOUT				UiLayout::VERTICAL_1_COL
#define MENUI_DEFAULT_LIST_LAYOUT				UiLayout::HORIZONTAL_AUTO

#define MENUI_DEFAULT_MENU_STATUS				UiStatusFlags::UI_STATUS_SCROLLBAR
#define MENUI_DEFAULT_LIST_STATUS				UiStatusFlags::UI_STATUS_SCROLLBAR



// [UiRendererOptions] DEFAULT OPTIONS/CONSTANTS

// General renderer-specific default options

#define MENUI_DEFAULT_STYLED_LINE_MARGINS		1


// Glyph default options for non-LCD-based renderers

#define MENUI_DEFAULT_STYLED_LINE_LEFT_GLYPH	'['
#define MENUI_DEFAULT_STYLED_LINE_RIGHT_GLYPH	']'

#define MENUI_DEFAULT_MENU_ITEM_GLYPH			'-'
#define MENUI_DEFAULT_LIST_CHOICE_GLYPH			'*'
#define MENUI_DEFAULT_CURR_ITEM_GLYPH			'>'
#define MENUI_DEFAULT_SELECTION_GLYPH			'X'
#define MENUI_DEFAULT_MULTI_SELECTION_GLYPH		'+'
#define MENUI_DEFAULT_VALUE_SEPARATOR_GLYPH		':'


// Glyph default options for LCD -based renderers

#define MENUI_DEFAULT_LCD_STYLED_LINE_LEFT_GLYPH	LCD_SYMBOL_BACKWARD
#define MENUI_DEFAULT_LCD_STYLED_LINE_RIGHT_GLYPH	LCD_SYMBOL_FORWARD

#define MENUI_DEFAULT_LCD_MENU_ITEM_GLYPH			LCD_SYMBOL_BULLET
#define MENUI_DEFAULT_LCD_LIST_CHOICE_GLYPH			LCD_SYMBOL_BULLET
#define MENUI_DEFAULT_LCD_CURR_ITEM_GLYPH			LCD_SYMBOL_ARROW_RIGHT
#define MENUI_DEFAULT_LCD_SELECTION_GLYPH			LCD_SYMBOL_TRIANGLE_UP
#define MENUI_DEFAULT_LCD_MULTI_SELECTION_GLYPH		LCD_SYMBOL_MULTIPLICATION
#define MENUI_DEFAULT_LCD_VALUE_SEPARATOR_GLYPH		MENUI_DEFAULT_VALUE_SEPARATOR_GLYPH



// MenUI FUNCTION OPTIONS

// Text display default options

#define MENUI_DEFAULT_TEXT_TIMEOUT_MS				0
#define MENUI_DEFAULT_TEXT_ALLOW_ESCAPE				TRUE
#define MENUI_DEFAULT_TEXT_ANY_ACTION_RETURNS		TRUE


// Menu/List default options

#define MENUI_DEFAULT_MENU_CAPACITY					5
#define MENUI_DEFAULT_LIST_CAPACITY					5


// Dialog/field default options

#define MENUI_DEFAULT_NUMERIC_FIELD_STEP			1
#define MENUI_DEFAULT_NUMERIC_FIELD_STEP_LARGE		10



// MISCELLANEOUS MenUI CONSTANTS

#define MENUI_IDLE_TICK_MS							100

#pragma endregion


namespace IttyBitty
{
#pragma region FORWARD DECLARATIONS & TYPE ALIASES

	struct _UiOptions;
	TYPEDEF_STRUCT_ALIASES(UiOptions, uioptions, UIOPTIONS);

	struct _UiRendererOptions;
	TYPEDEF_STRUCT_ALIASES(UiRendererOptions, uirendereroptions, UIRENDEREROPTIONS);

#pragma endregion


#pragma region UI NAVIGATION ENUMS

	enum UiActionType : BYTE
	{
		ACTION_UP		= 0x10,
		ACTION_DOWN		= 0x20,
		ACTION_LEFT		= 0x30,
		ACTION_RIGHT	= 0x40,
		ACTION_RETURN	= 0x50,
		ACTION_SELECT	= 0x60,
		ACTION_SHIFT	= 0x70,
		ACTION_ALT		= 0x80
	};

	TYPEDEF_ENUM_ALIASES(UiActionType, UIACTIONTYPE);

	enum UiActionBehavior : BYTE
	{
		ACTION_MOMENTARY	= 0x0,
		ACTION_LATCH		= 0x1
	};

	TYPEDEF_ENUM_ALIASES(UiActionBehavior, UIACTIONBEHAVIOR);

	ENUM UiAction : BYTE
	{
		UP		= ACTION_UP | ACTION_MOMENTARY,
		DOWN	= ACTION_DOWN | ACTION_MOMENTARY,
		LEFT	= ACTION_LEFT | ACTION_MOMENTARY,
		RIGHT	= ACTION_RIGHT | ACTION_MOMENTARY,
		RETURN	= ACTION_RETURN | ACTION_MOMENTARY,
		SELECT	= ACTION_SELECT | ACTION_MOMENTARY,
		SHIFT	= ACTION_SHIFT | ACTION_LATCH,
		ALT		= ACTION_ALT | ACTION_LATCH
	};

	TYPEDEF_ENUM_ALIASES(UiAction, UIACTION);

	#define UI_ACTION_BEHAVIOR_BIT			0x0

	STATIC CBOOL UiActionHasLatchBehavior(CUIACTION action)
	{
		return static_cast<CBOOL>(CHECK_BIT((CBYTE)action, UI_ACTION_BEHAVIOR_BIT));
	}

	STATIC CUIACTIONTYPE UiActionToActionType(CUIACTION action)
	{
		return static_cast<CUIACTIONTYPE>(HIGH_NYBBLE((CBYTE)action));
	}


	ENUM UiActionState : BYTE
	{
		INACTIVE		= 0x0,
		CLICK			= 0x1,
		DOUBLE_CLICK	= 0x2,
		HOLD			= 0x3,
		RELEASE			= 0x4
	};

	TYPEDEF_ENUM_ALIASES(UiActionState, UIACTIONSTATE);

#pragma endregion


#pragma region UI OPTION & LAYOUT ENUMS

	enum UiOrientation : BYTE
	{
		VERTICAL	= 0x0,
		HORIZONTAL	= 0x1
	};

	TYPEDEF_ENUM_ALIASES(UiOrientation, UIORIENTATION);


	ENUM UiDirection : BYTE
	{
		TOP_TO_BOTTOM	= VERTICAL | 0x0,
		BOTTOM_TO_TOP	= VERTICAL | 0x1,
		LEFT_TO_RIGHT	= HORIZONTAL | 0x0,
		RIGHT_TO_LEFT	= HORIZONTAL | 0x1
	};

	TYPEDEF_ENUM_ALIASES(UiDirection, UIDIRECTION);

	#define UI_DIRECTION_ORIENTATION_BIT	0x0
	#define UI_DIRECTION_BACKWARDS_BIT		0x1

	STATIC CBOOL UiDirectionIsHorizontal(CUIDIRECTION layoutDirection)
	{
		return static_cast<CBOOL>(CHECK_BIT((CBYTE)layoutDirection, UI_DIRECTION_ORIENTATION_BIT));
	}

	STATIC CBOOL UiDirectionIsBackwards(CUIDIRECTION layoutDirection)
	{
		return static_cast<CBOOL>(CHECK_BIT((CBYTE)layoutDirection, UI_DIRECTION_BACKWARDS_BIT));
	}


	enum UiLayoutCols : BYTE
	{
		COLS_AUTO	= 0x0,
		COLS_1		= 0x2,
		COLS_2		= 0x4,
		COLS_3		= 0xC,
		COLS_4		= 0x10,
		COLS_5		= 0x14,
		COLS_6		= 0x18,
		COLS_7		= 0x1C,
		COLS_8		= 0x20
	};

	TYPEDEF_ENUM_ALIASES(UiLayoutCols, UILAYOUTCOLS);

	ENUM UiLayout : BYTE
	{
		VERTICAL_AUTO		= VERTICAL | COLS_AUTO,
		HORIZONTAL_AUTO		= HORIZONTAL | COLS_AUTO,
		VERTICAL_1_COL		= VERTICAL | COLS_1,
		HORIZONTAL_1_COL	= HORIZONTAL | COLS_1,
		VERTICAL_2_COL		= VERTICAL | COLS_2,
		HORIZONTAL_2_COL	= HORIZONTAL | COLS_2,
		VERTICAL_3_COL		= VERTICAL | COLS_3,
		HORIZONTAL_3_COL	= HORIZONTAL | COLS_3,
		VERTICAL_4_COL		= VERTICAL | COLS_4,
		HORIZONTAL_4_COL	= HORIZONTAL | COLS_4,
		VERTICAL_5_COL		= VERTICAL | COLS_5,
		HORIZONTAL_5_COL	= HORIZONTAL | COLS_5,
		VERTICAL_6_COL		= VERTICAL | COLS_6,
		HORIZONTAL_6_COL	= HORIZONTAL | COLS_6,
		VERTICAL_7_COL		= VERTICAL | COLS_7,
		HORIZONTAL_7_COL	= HORIZONTAL | COLS_7,
		VERTICAL_8_COL		= VERTICAL | COLS_8,
		HORIZONTAL_8_COL	= HORIZONTAL | COLS_8,
	};

	TYPEDEF_ENUM_ALIASES(UiLayout, UILAYOUT);

	#define UI_LAYOUT_COLS_OFFSET			0x2

	STATIC CBOOL UiLayoutIsHorizontal(CUILAYOUT layout)
	{
		return static_cast<CBOOL>(CHECK_BIT((CBYTE)layout, UI_DIRECTION_ORIENTATION_BIT));
	}

	STATIC CBYTE UiLayoutToNumCols(CUILAYOUT layout)
	{
		return (CBYTE)layout SHR UI_LAYOUT_COLS_OFFSET;
	}


	enum UiStatusFlags : BYTE
	{
		UI_STATUS_NONE				= 0x0,
		UI_STATUS_SCROLLBAR			= 0x1,
		UI_STATUS_ITEM_INDEX		= 0x2,
		UI_STATUS_PAGE_INDEX		= 0x4,
		UI_STATUS_SHOW_TOTAL		= 0x8
	};

	TYPEDEF_ENUM_ALIASES(UiStatusFlags, UISTATUSFLAGS);

#pragma endregion


#pragma region UI FIELD ENUMS

	enum AllowedCharFlags : BYTE
	{
		ALLOWED_CHARS_ALL		= 0x0,
		ALLOWED_CHARS_NUMERIC	= 0x1,
		ALLOWED_CHARS_UPPER		= 0x2,
		ALLOWED_CHARS_LOWER		= 0x4
	};

	TYPEDEF_ENUM_ALIASES(AllowedCharFlags, ALLOWEDCHARFLAGS);

#pragma endregion



#pragma region [UiOptions] DEFINITION

	STRUCT _UiOptions final
	{
	public:

		// PUBLIC INSTANCE VARIABLES

		// Behavior/interaction options

		BOOL ScrollWrap					= MENUI_DEFAULT_SCROLL_WRAP;
		BYTE ScrollHoldRow				= MENUI_DEFAULT_SCROLL_HOLD_ROW;

		WORD IdleTimeoutTicks			= MENUI_DEFAULT_IDLE_TIMEOUT_TICKS;


		// Navigation/input options

		BOOL DblClickThresholdMS		= MENUI_DEFAULT_DBL_CLICK_THRESHOLD_MS;
		BOOL HoldThresholdMS			= MENUI_DEFAULT_HOLD_THRESHOLD_MS;
		BOOL HoldRepeatMS				= MENUI_DEFAULT_HOLD_REPEAT_MS;

		BOOL SelectOnReturn				= MENUI_DEFAULT_SELECT_ON_RETURN;
		BOOL HoldSelectToSelect			= MENUI_DEFAULT_HOLD_SELECT_TO_SELECT;
		BOOL HoldSelectToReturn			= MENUI_DEFAULT_HOLD_SELECT_TO_RETURN;


		// Display options

		STRUCT _UiDisplayOptions
		{
			BOOL ShowCursor				= MENUI_DEFAULT_SHOW_CURSOR;
			BOOL BlinkCursor			= MENUI_DEFAULT_BLINK_CURSOR;
			BOOL WrapLabels				= MENUI_DEFAULT_WRAP_LABELS;

			BYTE LayoutColSpacing		= MENUI_DEFAULT_LAYOUT_COL_SPACING;
			BYTE ListItemMargin			= MENUI_DEFAULT_LIST_ITEM_MARGIN;
			BYTE SelectionGlyphOffset	= MENUI_DEFAULT_SELECTION_GLYPH_OFFSET;

			UILAYOUT MenuLayout			= MENUI_DEFAULT_MENU_LAYOUT;
			UILAYOUT ListLayout			= MENUI_DEFAULT_LIST_LAYOUT;

			UISTATUSFLAGS MenuStatus	= MENUI_DEFAULT_MENU_STATUS;
			UISTATUSFLAGS ListStatus	= MENUI_DEFAULT_LIST_STATUS;

			BOOL HighlightSelections UNUSED	= MENUI_DEFAULT_HIGHLIGHT_SELECTIONS;
		}
		Display;
	};

#pragma endregion



#pragma region [_UiRendererOptions] DEFINITION

	STRUCT _UiRendererOptions final
	{
	public:

		// PUBLIC INSTANCE VARIABLES

		// General renderer-specific options

		BOOL ShowCursor					= MENUI_DEFAULT_SHOW_CURSOR;
		BOOL BlinkCursor				= MENUI_DEFAULT_BLINK_CURSOR;
		BOOL WrapLabels					= MENUI_DEFAULT_WRAP_LABELS;

		BYTE StyledLineMargins			= MENUI_DEFAULT_STYLED_LINE_MARGINS;


		// Glyph options

		CHAR StyledLineLeftGlyph		= MENUI_DEFAULT_STYLED_LINE_LEFT_GLYPH;
		CHAR StyledLineRightGlyph		= MENUI_DEFAULT_STYLED_LINE_RIGHT_GLYPH;

		CHAR MenuItemGlyph				= MENUI_DEFAULT_MENU_ITEM_GLYPH;
		CHAR ListChoiceGlyph			= MENUI_DEFAULT_LIST_CHOICE_GLYPH;
		CHAR CurrItemGlyph				= MENUI_DEFAULT_CURR_ITEM_GLYPH;
		CHAR SelectionGlyph				= MENUI_DEFAULT_SELECTION_GLYPH;
		CHAR MultiSelectionGlyph		= MENUI_DEFAULT_MULTI_SELECTION_GLYPH;
		CHAR ValueSeparatorGlyph		= MENUI_DEFAULT_VALUE_SEPARATOR_GLYPH;
	};

#pragma endregion


#pragma region GLOBAL VARIABLE & FUNCTION DECLARATIONS

	namespace MUI
	{
		EXTERN UIOPTIONS Options;

		EXTERN RUIRENDEREROPTIONS GetDefaultRendererOptions();
		EXTERN RUIRENDEREROPTIONS GetDefaultLcdRendererOptions();
	}

#pragma endregion
};

#endif
